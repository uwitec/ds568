#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1891
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Com.DianShi.Model.Community
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DianShi")]
	public partial class DS_MessageDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDS_Message(DS_Message instance);
    partial void UpdateDS_Message(DS_Message instance);
    partial void DeleteDS_Message(DS_Message instance);
    #endregion
		
		public DS_MessageDataContext() : 
				base(global::Com.DianShi.Model.Community.Properties.Settings.Default.DianShiConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DS_MessageDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DS_MessageDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DS_MessageDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DS_MessageDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DS_Message> DS_Message
		{
			get
			{
				return this.GetTable<DS_Message>();
			}
		}
	}
	
	[Table(Name="dbo.DS_Message")]
	public partial class DS_Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MemberID;
		
		private string _Title;
		
		private string _Content;
		
		private string _ClientEmail;
		
		private string _ClientCompany;
		
		private string _ClientPhone;
		
		private string _ClientMobile;
		
		private bool _IsView;
		
		private byte _MsgType;
		
		private System.DateTime _CreateDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnClientEmailChanging(string value);
    partial void OnClientEmailChanged();
    partial void OnClientCompanyChanging(string value);
    partial void OnClientCompanyChanged();
    partial void OnClientPhoneChanging(string value);
    partial void OnClientPhoneChanged();
    partial void OnClientMobileChanging(string value);
    partial void OnClientMobileChanged();
    partial void OnIsViewChanging(bool value);
    partial void OnIsViewChanged();
    partial void OnMsgTypeChanging(byte value);
    partial void OnMsgTypeChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public DS_Message()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, IsVersion=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_ClientEmail", DbType="NChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string ClientEmail
		{
			get
			{
				return this._ClientEmail;
			}
			set
			{
				if ((this._ClientEmail != value))
				{
					this.OnClientEmailChanging(value);
					this.SendPropertyChanging();
					this._ClientEmail = value;
					this.SendPropertyChanged("ClientEmail");
					this.OnClientEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ClientCompany", DbType="NChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string ClientCompany
		{
			get
			{
				return this._ClientCompany;
			}
			set
			{
				if ((this._ClientCompany != value))
				{
					this.OnClientCompanyChanging(value);
					this.SendPropertyChanging();
					this._ClientCompany = value;
					this.SendPropertyChanged("ClientCompany");
					this.OnClientCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_ClientPhone", DbType="NChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string ClientPhone
		{
			get
			{
				return this._ClientPhone;
			}
			set
			{
				if ((this._ClientPhone != value))
				{
					this.OnClientPhoneChanging(value);
					this.SendPropertyChanging();
					this._ClientPhone = value;
					this.SendPropertyChanged("ClientPhone");
					this.OnClientPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMobile", DbType="NChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string ClientMobile
		{
			get
			{
				return this._ClientMobile;
			}
			set
			{
				if ((this._ClientMobile != value))
				{
					this.OnClientMobileChanging(value);
					this.SendPropertyChanging();
					this._ClientMobile = value;
					this.SendPropertyChanged("ClientMobile");
					this.OnClientMobileChanged();
				}
			}
		}
		
		[Column(Storage="_IsView", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsView
		{
			get
			{
				return this._IsView;
			}
			set
			{
				if ((this._IsView != value))
				{
					this.OnIsViewChanging(value);
					this.SendPropertyChanging();
					this._IsView = value;
					this.SendPropertyChanged("IsView");
					this.OnIsViewChanged();
				}
			}
		}
		
		[Column(Storage="_MsgType", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte MsgType
		{
			get
			{
				return this._MsgType;
			}
			set
			{
				if ((this._MsgType != value))
				{
					this.OnMsgTypeChanging(value);
					this.SendPropertyChanging();
					this._MsgType = value;
					this.SendPropertyChanged("MsgType");
					this.OnMsgTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
